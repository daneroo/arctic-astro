---
interface Props {
  places: {
    id: number;
    name: string;
    latitude: number;
    longitude: number;
  }[];
  selectedId?: number;
  lang: string;
}

const { places, selectedId, lang } = Astro.props;
---

<div id="map" class="w-full h-full"></div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<style>
  /* Ensure layer control is below sidebar but above map */
  :global(.leaflet-control-layers) {
    z-index: 999 !important;
  }
</style>

<script is:inline define:vars={{ places, selectedId, lang }}>
  window.addEventListener('load', () => {
    // Fix for default marker icon
    const icon = L.icon({
      iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
      iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
      shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
    });

    // Initialize map
    const map = L.map('map', {
      zoomControl: false  // We'll reposition this
    });

    // Add zoom control to top-right
    L.control.zoom({
      position: 'topright'
    }).addTo(map);

    // Add layer control
    const layerControl = L.control.layers({
      'Satellite': L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
        attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
      }).addTo(map),
      'Map': L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }),
      'Terrain': L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a>'
      }),
      'Topo': L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {
        attribution: 'Tiles &copy; Esri &mdash; Source: USGS, Esri, TANA, DeLorme, and NPS'
      })
    }, {}, {
      position: 'topright',
    }).addTo(map);

    // Add markers
    const markers = places.map(place => 
      L.marker([place.latitude, place.longitude], { icon })
        .bindPopup(`
          <div>
            <a href="/${lang}/places/${place.id}" class="flex items-center gap-2 no-underline">
              <span>${place.name}</span>
              <span style="font-weight: bold; font-size: 1.0em;">â†—</span>
            </a>
          </div>
        `)
        .addTo(map)
    );

    // Set view
    if (selectedId) {
      const selected = places.find(p => p.id === selectedId);
      if (selected) {
        map.setView([selected.latitude, selected.longitude], 13);
      }
    } else if (places.length > 0) {
      const bounds = L.latLngBounds(places.map(p => [p.latitude, p.longitude]));
      map.fitBounds(bounds, { padding: [50, 50] });
    }
  });
</script> 