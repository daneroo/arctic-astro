---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Map from '../../components/Map.astro';

// Generate static paths for all places
export async function getStaticPaths() {
  const places = await getCollection('places');
  return places.map(place => ({
    params: { id: place.id.replace('.md', '') },
    props: { place, allPlaces: places },
  }));
}

const { place, allPlaces } = Astro.props;
const { Content } = await place.render();
---

<Layout title={place.data.name}>
  <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
    <div class="md:col-span-1">
      <ul class="space-y-2">
        {allPlaces.map(p => (
          <li>
            <a 
              href={`/places/${p.id.replace('.md', '')}`}
              class={`block p-3 rounded-md transition-colors ${
                p.id === place.id 
                  ? 'bg-blue-50' 
                  : 'hover:bg-gray-50'
              }`}
            >
              {p.data.name}
              <div class="text-sm text-gray-500">
                {p.data.latitude}, {p.data.longitude}
              </div>
            </a>
          </li>
        ))}
      </ul>
    </div>
    <div class="md:col-span-2">
      <header class="mb-6">
        <h1 class="text-2xl font-bold mb-2">{place.data.name}</h1>
        <p class="text-gray-600">Location: {place.data.latitude}, {place.data.longitude}</p>
      </header>
      <div class="h-[400px] mb-8">
        <Map 
          places={allPlaces.map(p => ({ 
            id: parseInt(p.id), 
            name: p.data.name, 
            latitude: p.data.latitude, 
            longitude: p.data.longitude 
          }))}
          selectedId={parseInt(place.id)}
        />
      </div>
      <article>
        <Content />
      </article>
    </div>
  </div>
</Layout> 